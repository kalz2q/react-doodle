import React from 'react';
import './App.css';
const { useEffect, useState, useCallback } = React;

function App() {
  const [png, setPng] = useState<string | null>(null);
  const [isPainting, setIsPainting] = useState(false);
  const [mousePosition, setMousePosition] = useState<Coordinate | undefined>(undefined);

  type Coordinate = {
    x: number;
    y: number;
  };

  useEffect(() => {
    const canvasElem = document.createElement("canvas");
    const context = canvasElem.getContext("2d");
    
    canvasElem.width = 400;
    canvasElem.height = 200;
    
    
    // ---
    if (context !== null) {
      context.lineWidth = 10;
      context.strokeStyle = "blue"
      context.strokeRect(0, 0, canvasElem.width, canvasElem.height);
      

      canvasElem.addEventListener("mousedown", event => startPaint(event));
      canvasElem.addEventListener("mousemove", event => getCoordinates(event));
      canvasElem.addEventListener('mousemove', event => paint(event));
      canvasElem.addEventListener('mouseup', () => exitPaint());
      canvasElem.addEventListener('mouseleave', () => exitPaint());

      const startPaint = (event: MouseEvent) =>   {
        const coordinates = getCoordinates(event);
        if (coordinates) {
          setMousePosition(coordinates);
          setIsPainting(true);
        }
      }

      const paint = (event: MouseEvent) => {
          if (isPainting) {
            const newMousePosition = getCoordinates(event);
            if (mousePosition && newMousePosition) {
              drawLine(mousePosition, newMousePosition);
              setMousePosition(newMousePosition);
            }
          }
        }

        const exitPaint = () =>  {
          setIsPainting(false);
          setMousePosition(undefined);
      }



      const getCoordinates = (event: MouseEvent): Coordinate | undefined => {
        return { x: event.pageX - canvasElem.offsetLeft, y: event.pageY - canvasElem.offsetTop };
    };

    const drawLine = (originalMousePosition: Coordinate, newMousePosition: Coordinate) => {
          context.strokeStyle = 'red';
          context.lineJoin = 'round';
          context.lineWidth = 5;

          context.beginPath();
          context.moveTo(originalMousePosition.x, originalMousePosition.y);
          context.lineTo(newMousePosition.x, newMousePosition.y);
          context.closePath();

          context.stroke();
  };


    }
    setPng(canvasElem.toDataURL());
  }, [png, isPainting, mousePosition]);

  return (
    <div className="App">
      <h1>お絵かきアプリ</h1>
      {png && <img alt="" src={png} />}
    </div>
  );
}

export default App;
